// Code generated by MockGen. DO NOT EDIT.
// Source: .\xbrclient.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockXBRClient is a mock of XBRClient interface.
type MockXBRClient struct {
	ctrl     *gomock.Controller
	recorder *MockXBRClientMockRecorder
}

// MockXBRClientMockRecorder is the mock recorder for MockXBRClient.
type MockXBRClientMockRecorder struct {
	mock *MockXBRClient
}

// NewMockXBRClient creates a new mock instance.
func NewMockXBRClient(ctrl *gomock.Controller) *MockXBRClient {
	mock := &MockXBRClient{ctrl: ctrl}
	mock.recorder = &MockXBRClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXBRClient) EXPECT() *MockXBRClientMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockXBRClient) Bind(ctx context.Context, parameter *BindParameter) (BindId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", ctx, parameter)
	ret0, _ := ret[0].(BindId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bind indicates an expected call of Bind.
func (mr *MockXBRClientMockRecorder) Bind(ctx, parameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockXBRClient)(nil).Bind), ctx, parameter)
}

// Unbind mocks base method.
func (m *MockXBRClient) Unbind(ctx context.Context, bindId BindId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unbind", ctx, bindId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unbind indicates an expected call of Unbind.
func (mr *MockXBRClientMockRecorder) Unbind(ctx, bindId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unbind", reflect.TypeOf((*MockXBRClient)(nil).Unbind), ctx, bindId)
}
