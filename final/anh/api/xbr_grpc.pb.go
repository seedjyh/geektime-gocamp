// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: xbr.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XBRClient is the client API for XBR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XBRClient interface {
	Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindReply, error)
	Unbind(ctx context.Context, in *UnbindRequest, opts ...grpc.CallOption) (*UnbindReply, error)
}

type xBRClient struct {
	cc grpc.ClientConnInterface
}

func NewXBRClient(cc grpc.ClientConnInterface) XBRClient {
	return &xBRClient{cc}
}

func (c *xBRClient) Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindReply, error) {
	out := new(BindReply)
	err := c.cc.Invoke(ctx, "/anh.xbr.XBR/Bind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xBRClient) Unbind(ctx context.Context, in *UnbindRequest, opts ...grpc.CallOption) (*UnbindReply, error) {
	out := new(UnbindReply)
	err := c.cc.Invoke(ctx, "/anh.xbr.XBR/Unbind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XBRServer is the server API for XBR service.
// All implementations must embed UnimplementedXBRServer
// for forward compatibility
type XBRServer interface {
	Bind(context.Context, *BindRequest) (*BindReply, error)
	Unbind(context.Context, *UnbindRequest) (*UnbindReply, error)
	mustEmbedUnimplementedXBRServer()
}

// UnimplementedXBRServer must be embedded to have forward compatible implementations.
type UnimplementedXBRServer struct {
}

func (UnimplementedXBRServer) Bind(context.Context, *BindRequest) (*BindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}
func (UnimplementedXBRServer) Unbind(context.Context, *UnbindRequest) (*UnbindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unbind not implemented")
}
func (UnimplementedXBRServer) mustEmbedUnimplementedXBRServer() {}

// UnsafeXBRServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XBRServer will
// result in compilation errors.
type UnsafeXBRServer interface {
	mustEmbedUnimplementedXBRServer()
}

func RegisterXBRServer(s grpc.ServiceRegistrar, srv XBRServer) {
	s.RegisterService(&XBR_ServiceDesc, srv)
}

func _XBR_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XBRServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anh.xbr.XBR/Bind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XBRServer).Bind(ctx, req.(*BindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XBR_Unbind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XBRServer).Unbind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anh.xbr.XBR/Unbind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XBRServer).Unbind(ctx, req.(*UnbindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// XBR_ServiceDesc is the grpc.ServiceDesc for XBR service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XBR_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anh.xbr.XBR",
	HandlerType: (*XBRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bind",
			Handler:    _XBR_Bind_Handler,
		},
		{
			MethodName: "Unbind",
			Handler:    _XBR_Unbind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xbr.proto",
}
